scalar Date

enum Place {
  Bench
  Refrigerator
  Freezer
  Tools
}

type User {
  id: Int
  email: String
  active: Boolean
  profile: Profile
  createdAt: String
  updatedAt: String
}

type Profile {
  nickname: String
  avatar: String
  gender: String
  genderActive: Boolean
  birthday: Date
  birthdayActive: Boolean
  xp: Int
  credit: Int
}

input ProfileInput {
  nickname: String
  avatar: String
  gender: String
  genderActive: Boolean
  birthday: Date
  birthdayActive: Boolean
  xp: Int
  credit: Int
}

input LoginInput {
  email: String!
  password: String!
}

# Responses

interface Response {
  code: Int!
  success: Boolean!
  message: String!
}

type UserResponse implements Response {
  code: Int!
  success: Boolean!
  message: String!
  user: User
}

# Mutations

type Mutation {
  # Auth Mutations
  register(input: LoginInput!): UserResponse!
  login(email: String!, password: String!): UserResponse!
}

type Query {
  # Profile
  me: UserResponse!
}
