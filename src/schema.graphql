scalar Date

enum Place {
  Bench
  Refrigerator
  Freezer
  Tools
}

type User {
  id: Int
  phone: String
  email: String
  name: String
  degree: String
  organization: String
  city: String
  active: Boolean
  token: String
  createdAt: String
  updatedAt: String
}

input UserInput {
  name: String
  degree: String
  organization: String
  city: String
}

input AccountInput {
  email: String
  phone: String
}

# Responses

interface Response {
  code: String!
  success: Boolean!
  message: String!
}

type UserResponse implements Response {
  code: String!
  success: Boolean!
  message: String!
  user: User
}

# Mutations

type Mutation {
  # Auth Mutations
  register(email: String!, password: String!, name: String!): UserResponse!
  login(email: String!, password: String!): UserResponse!
  forgotPassowrd: UserResponse!
  verifyForgotPassword(code: String!, password: String!): UserResponse!

  # User mutations
  updateUser(input: UserInput!): UserResponse!
  updateAccountOTP: UserResponse!
  updateAccount(code: String!, input: AccountInput!): UserResponse!
}

type Query {
  # Profile
  me: UserResponse!
}
